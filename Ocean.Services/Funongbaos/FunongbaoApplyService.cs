//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
// </auto-generated>
//
// <copyright file="FunongbaoApply.cs">
//		Copyright(c)2014 Ocean.All rights reserved.
//		CLR版本：4.0.30319.239
//		生成时间：2014-02-07 14:23
// </copyright>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Ocean.Entity;
using Ocean.Core.Data;
using Ocean.Data;
using Ocean.Entity.DTO;
using Ocean.Core.Utility;
using Ocean.Core;
using Ocean.Core.Infrastructure;


namespace Ocean.Services
{
    public class FunongbaoApplyService : ServiceBase<FunongbaoApply>, IFunongbaoApplyService
    {
        private readonly IFunongbaoService _funongbaoService;
		public FunongbaoApplyService(IRepository<FunongbaoApply> funongbaoApplyRepository, IDbContext context)
            : base(funongbaoApplyRepository, context)
        {
            _funongbaoService = EngineContext.Current.Resolve<IFunongbaoService>();
        }

        public PagedList<FunongbaoApply> GetPageList(int pageIndex,int pageSize, Guid mpUserId)
        {
            IQueryable<FunongbaoApply> query = base.Table.Where(f => f.RFunongbao.MpUserId == mpUserId);
            int count = query.Count();

            if (pageIndex == 1)
            {
                query = query.OrderByDescending(f => f.ApplyDate).Take<FunongbaoApply>(pageSize);
            }
            else
            {
                query = query.OrderByDescending(f => f.ApplyDate).Skip<FunongbaoApply>((pageIndex - 1) * pageSize).Take<FunongbaoApply>(pageSize);
            }

            PagedList<FunongbaoApply> pageItems = new PagedList<FunongbaoApply>(query.ToList(), pageIndex, pageSize);
            pageItems.TotalItemCount = count;
            return pageItems;


            //int count = this.GetCount("select count(*) from FunongbaoApply fa inner join Funongbao f on fa.FunongbaoId=f.Id where f.MpUserId='" + mpUserId.ToString() + "' and fa.ApplyDate>'1900-01-01 00:00:00'");
            //PagedList<FunongbaoApply> pageItems =this.GetPageList("select fa.*,f.GroupNO from FunongbaoApply fa inner join Funongbao f on fa.FunongbaoId=f.Id where f.MpUserId='"+mpUserId.ToString()+"' and fa.ApplyDate>'1900-01-01 00:00:00' order by fa.ApplyDate desc ", PageIndex, PageSize);
            //pageItems.TotalItemCount = count;
            //return pageItems;
        }

        /// <summary>
        /// 根据搜索条件获取分页数据
        /// </summary>
        public PagedList<FunongbaoApply> GetPageList(int pageIndex, int pageSize, FunongbaoApply funongBaoApplyDTO)
        {
            IQueryable<FunongbaoApply> query = base.Table.Where(f=>f.GroupApplyStatus==0);

            if (funongBaoApplyDTO.ApplyDate > new DateTime(1900, 1, 2) || funongBaoApplyDTO.ApplyDate == new DateTime(1900, 1, 1))
            {
                query = query.Where(f => f.ApplyDate > new DateTime(1900, 1, 1));
            }
            else
            {
                query = query.Where(f => f.ApplyDate == new DateTime(1900, 1, 1));
            }

            if (!string.IsNullOrEmpty(funongBaoApplyDTO.RFunongbao.Name))
            {
                query=query.Where(f => f.RFunongbao.Name.Contains(funongBaoApplyDTO.RFunongbao.Name));
            }
            if (!string.IsNullOrEmpty(funongBaoApplyDTO.RFunongbao.FunongbaoNO))
            {
                query = query.Where(f => f.RFunongbao.FunongbaoNO.Contains(funongBaoApplyDTO.RFunongbao.FunongbaoNO));
            }
            if (!string.IsNullOrEmpty(funongBaoApplyDTO.RFunongbao.GroupNO))
            {
                query = query.Where(f => f.RFunongbao.FunongbaoNO.Contains(funongBaoApplyDTO.RFunongbao.GroupNO));
            }
            if (funongBaoApplyDTO.ProcessStatus >= 0)
            {
                query = query.Where(f => f.ProcessStatus == funongBaoApplyDTO.ProcessStatus);
            }
            if (funongBaoApplyDTO.FinishDate > new DateTime(2014, 1, 1))
            {
                query = query.Where(f => f.ApplyDate >= funongBaoApplyDTO.FinishDate);
            }
            if (funongBaoApplyDTO.FinishEndDate > new DateTime(2014, 1, 1))
            {
                DateTime endDate = funongBaoApplyDTO.FinishEndDate.AddHours(23).AddMinutes(59).AddSeconds(59);
                query = query.Where(f => f.ApplyDate <= endDate);
            }


            int count = query.Count();

            if (pageIndex == 1)
            {
                query = query.OrderByDescending(f => f.ApplyDate).Take<FunongbaoApply>(pageSize);
            }
            else
            {
                query = query.OrderByDescending(f => f.ApplyDate).Skip<FunongbaoApply>((pageIndex - 1) * pageSize).Take<FunongbaoApply>(pageSize);
            }

            PagedList<FunongbaoApply> pageItems = new PagedList<FunongbaoApply>(query.ToList(), pageIndex, pageSize);
            pageItems.TotalItemCount = count;
            return pageItems;
        }


        public PagedList<FunongbaoApply> GetForTaskUserList(int pageIndex, int pageSize)
        {
            int currentMonth = DateTime.Now.Month;
            int year = DateTime.Now.Year;
            DateRule dateRule = DateRuleList.DateRules.Where(d => d.Months.Where(m => m == currentMonth).Count() > 0).First();
            string sql = "select fa.* from FunongbaoApply fa inner join Funongbao f on fa.FunongbaoId=f.Id inner join MpUser u on f.MpUserId=u.Id where u.IsSubscribe=1 and fa.NoticeStatus=0 and fa.CreateDate>='" + (new DateTime(year, dateRule.ApplyMonth, DateRule.ApplyStartDay)) + "' and datediff(hour,u.lastvisitdate,getdate())<48 order by CreateDate desc ";

            return this.GetPageList(sql, pageIndex, pageSize);
        }

        public FunongbaoApply GetByFunongbaoId(Guid funongbaoId)
        {
            int currentMonth = DateTime.Now.Month;
            int year = DateTime.Now.Year;
            DateRule dateRule = DateRuleList.DateRules.Where(d => d.Months.Where(m => m == currentMonth).Count() > 0).First();
            DateTime startDate=new DateTime(year, dateRule.ApplyMonth, 1);
            DateTime endDate = new DateTime(year, dateRule.ApplyMonth, DateTime.DaysInMonth(year, dateRule.ApplyMonth), 23, 59, 59);
            return GetUnique(f => f.FunongbaoId == funongbaoId && f.CreateDate >= startDate && f.CreateDate <= endDate);//
        }

        public IList<LimitProgrammeDTO> GetLimitProgramme(string limitProgramme)
        {
            if (string.IsNullOrEmpty(limitProgramme))
            {
                return null;
            }
            else
            {
                IList<string> limitList = StringHelper.GetLimitProgrammes(limitProgramme);
                if (limitList == null || limitList.Count==0)
                {
                    return null;
                }
                else
                {
                    IList<LimitProgrammeDTO> limitDtoList = new List<LimitProgrammeDTO>();
                    foreach (string limit in limitList)
                    {
                        string[] limitArr=limit.Split(',');
                        limitDtoList.Add(new LimitProgrammeDTO() { ApplyLimit = TypeConverter.StrToDecimal(limitArr[0]), ApplyRates = TypeConverter.StrToDecimal(limitArr[1]) });
                    }
                    return limitDtoList;
                }
            }
        }

        public FunongbaoApply ExistGroupApply(string groupNO)
        {
            int currentMonth = DateTime.Now.Month;
            int year = DateTime.Now.Year;
            DateRule dateRule = DateRuleList.DateRules.Where(d => d.Months.Where(m => m == currentMonth).Count() > 0).First();
            DateTime startDate = new DateTime(year, dateRule.ApplyMonth, 1);
            DateTime endDate = new DateTime(year, dateRule.ApplyMonth, DateTime.DaysInMonth(year, dateRule.ApplyMonth), 23, 59, 59);
            return GetUnique(f => f.RFunongbao.GroupNO == groupNO && f.ApplyDate > new DateTime(1900, 1, 1) && (f.ApplyStatus == -1 || f.ApplyStatus == 0) && (f.CreateDate >= startDate && f.CreateDate <= endDate));//f.CreateDate >= new DateTime(year, dateRule.ApplyMonth, DateRule.ApplyStartDay)
        }


        public IList<FunongbaoApply> GetByFunongbaoIds(Guid[] funongbaoIds)
        {
            int currentMonth=DateTime.Now.Month;
            int year=DateTime.Now.Year;
            DateRule dateRule= DateRuleList.DateRules.Where(d=>d.Months.Where(m=>m==currentMonth).Count()>0).First();
            DateTime startDate = new DateTime(year, dateRule.ApplyMonth, 1);
            DateTime endDate = new DateTime(year, dateRule.ApplyMonth, DateTime.DaysInMonth(year, dateRule.ApplyMonth), 23, 59, 59);
            return this.GetALL(f => funongbaoIds.Contains(f.FunongbaoId) && f.CreateDate >= startDate && f.CreateDate <= endDate);//f.CreateDate >= new DateTime(year, dateRule.ApplyMonth, DateRule.ApplyStartDay)
        }


        public int UpdateApllysNew(FunongbaoApply[] applys, IEnumerable<FunongbaoApply> updateApps)
        {
            try
            {
                int result = 0;
                _context.BeginTransaction();
                    if (updateApps != null)
                    {
                        foreach (FunongbaoApply updateApp in updateApps)
                        {
                            updateApp.ChangedLimit = updateApp.PreLimit;
                            updateApp.ChangedRates = applys[0].ApplyRates;
                            updateApp.ApplyLimit = applys[0].ApplyLimit;
                            updateApp.ApplyRates = applys[0].ApplyRates;
                            updateApp.ApplyDate = applys[0].ApplyDate;
                            updateApp.ApplyStatus = 1;
                            updateApp.GroupApplyStatus = 1;//联动
                            updateApp.ProcessStatus = 0;
                            updateApp.FinishDate = DateTime.Now;
                            this.Update(updateApp);
                        }
                    }
                foreach (FunongbaoApply apply in applys)
                {
                    this.Update(apply);

                    //if (updateFnb)
                    //{
                    //    this.ExcuteSql("update Funongbao set CurrentLimit=" + apply.ChangedLimit + ",CurrentRates=" + apply.ChangedRates + ",GroupLimit=" + apply.ApplyLimit + " where Id='" + apply.FunongbaoId + "'");
                    //}
                    result++;
                }
                _context.Commit();
                return result;
            }
            catch (Exception ex)
            {
                _context.Rollback();
                throw new OceanException("对不起，系统繁忙，请联系客服！", ex);
            }
        }


        public int UpdateApllys(FunongbaoApply[] applys, bool updateFnb=false)
        {
            try
            {
                int result = 0;
                _context.BeginTransaction();
                foreach (FunongbaoApply apply in applys)
                {
                    if (updateFnb)
                    {
                        apply.RFunongbao.CurrentLimit = apply.ChangedLimit;

                        apply.RFunongbao.CurrentRates = applys[0].ChangedRates;
                        apply.RFunongbao.GroupLimit = applys[0].ApplyLimit;
                        apply.RFunongbao.PreFinishDate = apply.RFunongbao.FinishDate;
                        if (apply.ApplyDate <= new DateTime(applys[0].ApplyDate.Year, applys[0].ApplyDate.Month, DateRule.ApplyMiddleDay))
                        {
                            apply.RFunongbao.FinishDate = new DateTime(applys[0].ApplyDate.Year, applys[0].ApplyDate.Month, DateRule.ChangeDay);
                        }
                        else
                        {
                            apply.RFunongbao.FinishDate = new DateTime(applys[0].ApplyDate.Year, applys[0].ApplyDate.Month + 1, DateRule.ChangeDay);
                        }
                        //需测试
                        //_funongbaoService.Update(apply.RFunongbao);
                    }
                    else
                    {

                    }
                    this.Update(apply);

                    //if (updateFnb)
                    //{
                    //    this.ExcuteSql("update Funongbao set CurrentLimit=" + apply.ChangedLimit + ",CurrentRates=" + apply.ChangedRates + ",GroupLimit=" + apply.ApplyLimit + " where Id='" + apply.FunongbaoId + "'");
                    //}
                    result++;
                }
                _context.Commit();
                return result;
            }
            catch (Exception ex)
            {
                _context.Rollback();
                throw new OceanException("对不起，系统繁忙，请联系客服！", ex);
            }
        }
        public int UpdateApllys(FunongbaoApply[] applys, IEnumerable<FunongbaoApply> updateApps)
        {
            try
            {
                int result = 0;

                _context.BeginTransaction();
                foreach (FunongbaoApply apply in applys)
                {
                    apply.RFunongbao.CurrentLimit = apply.ChangedLimit;

                    apply.RFunongbao.CurrentRates = applys[0].ChangedRates;
                    apply.RFunongbao.GroupLimit = applys[0].ApplyTempLimit;
                    apply.RFunongbao.PreFinishDate = apply.RFunongbao.FinishDate;
                    apply.RFunongbao.FinishDate = DateTime.Now;
                    //if (apply.ApplyDate <= new DateTime(applys[0].ApplyDate.Year, applys[0].ApplyDate.Month, DateRule.ApplyMiddleDay))
                    //{
                    //    apply.RFunongbao.FinishDate = new DateTime(applys[0].ApplyDate.Year, applys[0].ApplyDate.Month, DateRule.ChangeDay);
                    //}
                    //else
                    //{
                    //    apply.RFunongbao.FinishDate = new DateTime(applys[0].ApplyDate.Year, applys[0].ApplyDate.Month + 1, DateRule.ChangeDay);
                    //}
                    //需测试
                    _funongbaoService.Update(apply.RFunongbao);
                    this.Update(apply);
                    //this.ExcuteSql("update Funongbao set CurrentLimit=" + apply.ChangedLimit + ",CurrentRates=" + apply.ChangedRates + ",GroupLimit=" + apply.ApplyLimit + " where Id='" + apply.FunongbaoId + "'");
                    if (updateApps != null && updateApps.Count() > 0)
                    {
                        foreach (FunongbaoApply updateApp in updateApps)
                        {
                            updateApp.ProcessStatus = 3;
                            updateApp.ChangedLimit = updateApp.PreLimit;
                            updateApp.ChangedRates = applys[0].ApplyTempRates;
                            updateApp.FinishDate = applys[0].FinishDate;

                            updateApp.RFunongbao.CurrentRates = applys[0].ChangedRates;
                            updateApp.RFunongbao.GroupLimit = applys[0].ApplyTempLimit;
                            updateApp.RFunongbao.PreFinishDate = apply.RFunongbao.FinishDate;
                            apply.RFunongbao.FinishDate = DateTime.Now;
                            //if (updateApp.ApplyDate <= new DateTime(applys[0].ApplyDate.Year, applys[0].ApplyDate.Month, DateRule.ApplyMiddleDay))
                            //{
                            //    updateApp.RFunongbao.FinishDate = new DateTime(applys[0].ApplyDate.Year, applys[0].ApplyDate.Month, DateRule.ChangeDay);
                            //}
                            //else
                            //{
                            //    updateApp.RFunongbao.FinishDate = new DateTime(applys[0].ApplyDate.Year, applys[0].ApplyDate.Month + 1, DateRule.ChangeDay);
                            //}
                            //需测试
                            //_funongbaoService.Update(updateApp.RFunongbao);

                            this.Update(updateApp);
                        }
                    }
                    result++;
                }
                _context.Commit();
                return result;
            }
            catch (Exception ex)
            {
                _context.Rollback();
                throw new OceanException("对不起，系统繁忙，请联系客服！", ex);
            }
        }

        public FunongbaoApply GetByFunongbaoIdAndDate(Guid funongbaoId)
        {
            int currentMonth = DateTime.Now.Month;
            int year = DateTime.Now.Year;
            DateRule dateRule = DateRuleList.DateRules.Where(d => d.Months.Where(m => m == currentMonth).Count() > 0).First();
            DateTime startDate = new DateTime(year, dateRule.ApplyMonth, 1);
            DateTime endDate = new DateTime(year, dateRule.ApplyMonth, DateTime.DaysInMonth(year, dateRule.ApplyMonth), 23, 59, 59);
            FunongbaoApply apply = GetUnique(f => f.FunongbaoId == funongbaoId && f.CreateDate >= startDate && f.CreateDate <= endDate);//f.CreateDate >= new DateTime(year, dateRule.ApplyMonth, DateRule.ApplyStartDay)

            //FunongbaoApply apply = GetUnique(" where FunongbaoId='"+funongbaoId.ToString()+"'");//(f => f.FunongbaoId == funongbaoId);
            if (apply != null)
            {
                //DateRule dateRuleApply = DateRuleList.DateRules.Where(d => d.Months.Where(m => m == apply.CreateDate.Month).Count() > 0).First();
                //if (dateRule.ApplyMonth == dateRuleApply.ApplyMonth)
                //{
                    return apply;
                //}
            }
            return null;
        }

        #region 测试
        public int CancelApply(Guid id)
        {
            FunongbaoApply apply = this.GetById(id);
            if (apply != null)
            {
                int currentMonth = apply.ApplyDate.Month;
                int year = apply.ApplyDate.Year;
                DateRule dateRule = DateRuleList.DateRules.Where(d => d.Months.Where(m => m == currentMonth).Count() > 0).First();
                this.ExcuteSql("update Funongbao set GroupLimit=" + apply.PreGroupLimit.ToString() + ",CurrentLimit=" + apply.PreLimit.ToString() + ",CurrentRates=" + apply.PreRates.ToString() + " where Id in (select Id from Funongbao where GroupNO in(select GroupNO from Funongbao where id='" + apply.FunongbaoId.ToString() + "'))");
                apply.ApplyLimit = 0.00M;
                apply.ApplyRates = 0.00M;
                apply.ChangedRates = 0.00M;
                apply.ChangedLimit = 0.00M;
                apply.ApplyStatus = 0;
                apply.ProcessStatus = 0;
                apply.ApplyDate = new DateTime(1900, 1, 1);
                apply.FinishDate = new DateTime(1900, 1, 1);
                apply.GroupApplyStatus = 0;
                this.Update(apply);
                return this.ExcuteSql("update FunongbaoApply set ApplyLimit=0.00,ApplyRates=0.00,ChangedLimit=0.00,ApplyType=0,ChangedRates=0.00,ApplyStatus=0,ProcessStatus=0,ApplyDate='1900-01-01',FinishDate='1900-01-01',GroupApplyStatus=0 where FunongbaoId in(select Id from Funongbao where GroupNO in(select GroupNO from Funongbao where id='" + apply.FunongbaoId.ToString() + "')) and charindex(convert(varchar(7),CreateDate,120),'" + StringHelper.GetQuarter(year, dateRule.Quarterly) + "')>0");
            }
            return 0;
        }
        #endregion
        
    }
}
