//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
// </auto-generated>
//
// <copyright file="Funongbao.cs">
//		Copyright(c)2014 Ocean.All rights reserved.
//		CLR版本：4.0.30319.239
//		生成时间：2014-02-05 18:52
// </copyright>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Ocean.Entity;
using Ocean.Core.Data;
using Ocean.Data;
using Ocean.Core;
using Ocean.Entity.DTO;


namespace Ocean.Services
{
    public class FunongbaoService : ServiceBase<Funongbao>, IFunongbaoService
    {
		public FunongbaoService(IRepository<Funongbao> funongbaoRepository, IDbContext context)
            : base(funongbaoRepository, context)
        {
        }

        /// <summary>
        /// 根据搜索条件获取分页数据
        /// </summary>
        public PagedList<Funongbao> GetPageList(int pageIndex, int pageSize, Funongbao funongBaoDTO)
        {
            IQueryable<Funongbao> query = base.Table;

            if (!string.IsNullOrEmpty(funongBaoDTO.Name))
            {
                query = query.Where(f => f.Name.Contains(funongBaoDTO.Name));
            }
            if (!string.IsNullOrEmpty(funongBaoDTO.FunongbaoNO))
            {
                query = query.Where(f => f.FunongbaoNO.Contains(funongBaoDTO.FunongbaoNO));
            }
            if (!string.IsNullOrEmpty(funongBaoDTO.GroupNO))
            {
                query = query.Where(f => f.GroupNO.Contains(funongBaoDTO.GroupNO));
            }
            if (funongBaoDTO.IsAuth >= 0)
            {
                query = query.Where(f => f.IsAuth == funongBaoDTO.IsAuth);
            }

            if (funongBaoDTO.IsSignAgreement >= 0)
            {
                query = query.Where(f => f.IsSignAgreement == funongBaoDTO.IsSignAgreement);
            }

            int count = query.Count();

            if (pageIndex == 1)
            {
                query = query.OrderByDescending(f => f.CreateDate).Take<Funongbao>(pageSize);
            }
            else
            {
                query = query.OrderByDescending(f=>f.CreateDate).Skip<Funongbao>((pageIndex-1) * pageSize).Take<Funongbao>(pageSize);
            }
            IList<Funongbao> list = query.ToList();
            
            PagedList<Funongbao> pageItems = new PagedList<Funongbao>(list, pageIndex, pageSize);
            pageItems.TotalItemCount = count;
            return pageItems;
        }
        public OceanDynamicList<object> GetPageDynamicList(int pageIndex, int pageSize, Funongbao funongBaoDTO, int isAll)
        {
            string condition = "";
            Dictionary<string, object> parms = new Dictionary<string, object>();
            if (!string.IsNullOrEmpty(funongBaoDTO.Name))
            {
                parms.Add("name", funongBaoDTO.Name);
                if (!string.IsNullOrEmpty(condition))
                {
                    condition += " and ";
                }
                else
                {
                    condition += " where ";
                }
                condition += "f.Name=@Name";
            }
            if (!string.IsNullOrEmpty(funongBaoDTO.FunongbaoNO))
            {
                parms.Add("FunongbaoNO", funongBaoDTO.FunongbaoNO);
                if (!string.IsNullOrEmpty(condition))
                {
                    condition += " and ";
                }
                else
                {
                    condition += " where ";
                }
                condition += "f.FunongbaoNO like '%'+@FunongbaoNO+'%'";
            }
            if (!string.IsNullOrEmpty(funongBaoDTO.GroupNO))
            {
                parms.Add("GroupNO", funongBaoDTO.GroupNO);
                if (!string.IsNullOrEmpty(condition))
                {
                    condition += " and ";
                }
                else
                {
                    condition += " where ";
                }
                condition += "f.GroupNO like '%'+@GroupNO+'%'";
            }
            if (funongBaoDTO.IsAuth >= 0)
            {
                parms.Add("IsAuth", funongBaoDTO.IsAuth);
                if (!string.IsNullOrEmpty(condition))
                {
                    condition += " and ";
                }
                else
                {
                    condition += " where ";
                }
                condition += "f.IsAuth=@IsAuth";
            }

            if (funongBaoDTO.IsSignAgreement >= 0)
            {
                parms.Add("IsSignAgreement", funongBaoDTO.IsSignAgreement);
                if (!string.IsNullOrEmpty(condition))
                {
                    condition += " and ";
                }
                else
                {
                    condition += " where ";
                }
                condition += "f.IsSignAgreement=@IsSignAgreement";
            }
           
            return this.GetDynamicList("select f.Id,f.MpUserId,f.OpenId,f.PassportNO,f.Name,f.MobilePhone,f.FunongbaoNO,f.BankNO,f.GroupLimit,f.CurrentLimit,f.CurrentRates,f.GroupNO,f.IsAuth,f.IsSignAgreement,CreateDate,FinishDate,Subbranch,Marketer from Funongbao f "+ condition + " order by CreateDate desc", pageIndex, pageSize, parms);
        }

        public OceanDynamicList<object> GetPageDynamicList(int pageIndex, int pageSize, Funongbao funongBaoDTO)
        {
            string condition = "";
            Dictionary<string, object> parms = new Dictionary<string, object>();
            if (!string.IsNullOrEmpty(funongBaoDTO.Name))
            {
                parms.Add("name", funongBaoDTO.Name);
                if (!string.IsNullOrEmpty(condition))
                {
                    condition += " and ";
                }
                else
                {
                    condition += " where ";
                }
                condition += "f.Name=@Name";
            }
            if (!string.IsNullOrEmpty(funongBaoDTO.FunongbaoNO))
            {
                parms.Add("FunongbaoNO", funongBaoDTO.FunongbaoNO);
                if (!string.IsNullOrEmpty(condition))
                {
                    condition += " and ";
                }
                else
                {
                    condition += " where ";
                }
                condition+="f.FunongbaoNO like '%'+@FunongbaoNO+'%'";
            }
            if (!string.IsNullOrEmpty(funongBaoDTO.GroupNO))
            {
                parms.Add("GroupNO", funongBaoDTO.GroupNO);
                if (!string.IsNullOrEmpty(condition))
                {
                    condition += " and ";
                }
                else
                {
                    condition += " where ";
                }
                condition += "f.GroupNO like '%'+@GroupNO+'%'";
            }
            if (funongBaoDTO.IsAuth >= 0)
            {
                parms.Add("IsAuth", funongBaoDTO.IsAuth);
                if (!string.IsNullOrEmpty(condition))
                {
                    condition += " and ";
                }
                else
                {
                    condition += " where ";
                }
                condition += "f.IsAuth=@IsAuth";
            }

            if (funongBaoDTO.IsSignAgreement >= 0)
            {
                parms.Add("IsSignAgreement", funongBaoDTO.IsSignAgreement);
                if (!string.IsNullOrEmpty(condition))
                {
                    condition += " and ";
                }
                else
                {
                    condition += " where ";
                }
                condition += "f.IsSignAgreement=@IsSignAgreement";
            }
            if (!string.IsNullOrEmpty(funongBaoDTO.ImportQuarter))
            {
                parms.Add("ImportQuarter", funongBaoDTO.ImportQuarter);
                if (!string.IsNullOrEmpty(condition))
                {
                    condition += " and ";
                }
                else
                {
                    condition += " where ";
                }
                condition += "charindex(convert(varchar(7),fa.CreateDate,120),@ImportQuarter)>0";
            }

            return this.GetDynamicList("select f.Id,f.MpUserId,f.OpenId,f.PassportNO,f.Name,f.MobilePhone,f.FunongbaoNO,f.BankNO,f.GroupLimit,f.CurrentLimit,f.CurrentRates,f.GroupNO,f.IsAuth,f.IsSignAgreement,fa.CreateDate,fa.Subbranch,fa.Marketer,fa.LimitProgramme,fa.PreLimit,fa.PreRates,fa.PreGroupLimit from Funongbao f inner join FunongbaoApply fa on f.Id=fa.FunongbaoId" + condition+" order by fa.CreateDate desc", pageIndex, pageSize, parms);

        }


        /// <summary>
        /// 通过openid获取福农宝
        /// </summary>
        public Funongbao GetFunongbaoByOpenid(string openid)
        {
            return this.GetUnique(f => f.OpenId == openid);
        }

        /// <summary>
        /// 获取福农宝号
        /// </summary>
        /// <param name="no">组编号</param>
        /// <returns></returns>
        public IList<Funongbao> GetGroupByNo(string groupNo)
        {
            return this.GetALL(fg => fg.GroupNO == groupNo);
        }

        /// <summary>
        /// 身份验证
        /// </summary>
        /// <param name="authItems">验证项</param>
        /// <returns>1-验证通过，2-身份证验证不通过，3-其他项验证不通过,4-都不通过</returns>
        public int IdentAuth(Funongbao authItems,out Funongbao authFnb,bool isPassportNO=true)
        {
            authFnb = null;
            if (isPassportNO)
            {
                Funongbao fnb = this.GetUnique(f => f.FunongbaoNO == authItems.FunongbaoNO && f.PassportNO == authItems.PassportNO && f.Name == authItems.Name && f.MobilePhone == authItems.MobilePhone);
                if (fnb != null)
                {
                    if (fnb.IsAuth == 1)
                    {
                        return -1;
                    }
                    authFnb = fnb;
                    return 1;
                    
                }
                else
                {
                    Funongbao fnb1 = this.GetUnique(f => f.PassportNO == authItems.PassportNO || (f.FunongbaoNO == authItems.FunongbaoNO && f.Name == authItems.Name && f.MobilePhone == authItems.MobilePhone));
                    if (fnb1 != null)
                    {
                        if (fnb1.IsAuth == 1)
                        {
                            return -1;
                        }
                        if (fnb1.PassportNO == authItems.PassportNO)
                        {
                            return 2;
                        }
                        else
                        {
                            return 3;
                        }
                    }
                    else
                    {
                        return 4;
                    }
                }
            }
            else
            {
                Funongbao fnb = this.GetUnique(" where FunongbaoNO='"+authItems.FunongbaoNO+"'");//f => f.FunongbaoNO == authItems.FunongbaoNO);
                if (fnb != null)
                {
                    authFnb = fnb;
                    return 1;
                }
                else
                {
                    return 4;
                }
            }
        }

        public int IdentAuth2(Funongbao authItems, out Funongbao authFnb, bool isPassportNO = true)
        {
            authFnb = null;
            if (isPassportNO)
            {
                Dictionary<string, object> parms = new Dictionary<string, object>();
                parms.Add("Funongbao", authItems.FunongbaoNO);
                parms.Add("PassportNO", authItems.PassportNO);
                parms.Add("Name", authItems.Name);
                parms.Add("MobilePhone", authItems.MobilePhone);
                Funongbao fnb = this.GetUnique("where right(FunongbaoNO,8)=@Funongbao and right(PassportNO,8)=@PassportNO and Name=@Name and MobilePhone=@MobilePhone", parms);//f => f.FunongbaoNO == authItems.FunongbaoNO && f.PassportNO == authItems.PassportNO && f.Name == authItems.Name && f.MobilePhone == authItems.MobilePhone);
                if (fnb != null)
                {
                    if (fnb.IsAuth == 1)
                    {
                        return -1;
                    }
                    authFnb = fnb;
                    return 1;

                }
                else
                {

                    Funongbao fnb1 = this.GetUnique("where right(FunongbaoNO,8)=@Funongbao or (right(PassportNO,8)=@PassportNO and Name=@Name and MobilePhone=@MobilePhone)", parms);//f => f.PassportNO == authItems.PassportNO || (f.FunongbaoNO == authItems.FunongbaoNO && f.Name == authItems.Name && f.MobilePhone == authItems.MobilePhone)
                    if (fnb1 != null)
                    {
                        if (fnb1.IsAuth == 1)
                        {
                            return -1;
                        }
                        if (fnb1.PassportNO == authItems.PassportNO)
                        {
                            return 2;
                        }
                        else
                        {
                            return 3;
                        }
                    }
                    else
                    {
                        return 4;
                    }
                }
            }
            else
            {
                Funongbao fnb = this.GetUnique(" where FunongbaoNO='" + authItems.FunongbaoNO + "'");//f => f.FunongbaoNO == authItems.FunongbaoNO);
                if (fnb != null)
                {
                    authFnb = fnb;
                    return 1;
                }
                else
                {
                    return 4;
                }
            }
        }
        #region 测试
        public int CancelIdentAuth(Guid id)
        {
            return this.ExcuteSql("update Funongbao set MpUserId=null,OpenId=null,IsAuth=0 where Id='" + id.ToString() + "'");
        }
        #endregion
    }
}
