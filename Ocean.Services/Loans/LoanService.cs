//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
// </auto-generated>
//
// <copyright file="Loan.cs">
//		Copyright(c)2014 Ocean.All rights reserved.
//		CLR版本：4.0.30319.239
//		生成时间：2014-01-26 09:55
// </copyright>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Ocean.Entity;
using Ocean.Core.Data;
using Ocean.Data;
using Ocean.Core;
using Ocean.Entity.DTO;
using Ocean.Core.Caching;
using Ocean.Core.Data.OrderBy;

namespace Ocean.Services
{
    public class LoanService : ServiceBase<Loan>, ILoanService
    {
        private readonly ICacheManager _cacheManager;

        public LoanService(IRepository<Loan> loanRepository, IDbContext context, ICacheManager cacheManager)
            : base(loanRepository, context)
        {
            this._cacheManager = cacheManager;
        }

        /// <summary>
        /// 根据搜索条件获取分页数据
        /// </summary>
        public PagedList<Loan> GetPageList(int pageIndex, int pageSize, LoanDTO loanDTO)
        {
            IQueryable<Loan> query = base.Table;

            if (loanDTO.Status.HasValue)
            {
                query = query.Where(l => l.Status == loanDTO.Status);
            }

            if (loanDTO.LoanCategoryId.HasValue)
            {
                query = query.Where(l => l.LoanCategoryId == loanDTO.LoanCategoryId);
            }

            if (loanDTO.DeadlineId.HasValue)
            {
                query = query.Where(l => l.DeadlineId == loanDTO.DeadlineId);
            }

            if (loanDTO.GuaranteeWayId.HasValue)
            {
                query = query.Where(l => l.GuaranteeWayId == loanDTO.GuaranteeWayId);
            }

            if (loanDTO.ProcessStatus.HasValue)
            {
                if ((int)loanDTO.ProcessStatus == 99)
                {
                    query = query.Where(l => l.ProcessStatus == 1 || l.ProcessStatus == 2 || l.ProcessStatus == 3);
                }
                else
                {
                    query = query.Where(l => l.ProcessStatus == loanDTO.ProcessStatus);
                }
            }

            if (loanDTO.AssignStatus.HasValue)
            {
                query = query.Where(l => l.AssignStatus == loanDTO.AssignStatus);
            }

            if (loanDTO.PastDueId.HasValue)
            {
                DateTime dtPastDue = DateTime.Now.AddMonths(-1);

                if ((int)loanDTO.PastDueId == 1)
                {
                    query = query.Where(l => l.CreateDate < dtPastDue);
                }

                if ((int)loanDTO.PastDueId == 0)
                {
                    query = query.Where(l => l.CreateDate >= dtPastDue);
                }
            }

            if (loanDTO.StartDate.HasValue)
            {
                query = query.Where(l => l.CreateDate >= loanDTO.StartDate);
            }

            if (loanDTO.EndDate.HasValue)
            {
                DateTime dtEndDate = ((DateTime)loanDTO.EndDate).AddDays(1);
                query = query.Where(l => l.CreateDate <= dtEndDate);
            }

            if (!string.IsNullOrWhiteSpace(loanDTO.LoanName))
            {
                query = query.Where(l => l.MpUser.Name == loanDTO.LoanName);
            }

            if (!string.IsNullOrWhiteSpace(loanDTO.AssignCustomerManager))
            {
                query = query.Where(l => l.AssignCustomerManager == loanDTO.AssignCustomerManager);
            }

            if (loanDTO.MpUserId != null && loanDTO.MpUserId != Guid.Empty)
            {
                query = query.Where(l => l.MpUserId == loanDTO.MpUserId);
            }

            query = query.OrderByDescending("CreateDate");
            int count = query.Count();

            if (pageIndex == 1)
            {
                query = query.Take<Loan>(pageSize);
            }
            else
            {
                query = query.Skip<Loan>((pageIndex - 1) * pageSize).Take<Loan>(pageSize);
            }

            PagedList<Loan> pageItems = new PagedList<Loan>(query.ToList(), pageIndex, pageSize);
            pageItems.TotalItemCount = count;
            return pageItems;
        }

        /// <summary>
        /// 根据用户Id获取最新贷款申请记录[未撤销]
        /// </summary>
        public Loan GetNewestLoanApplyByMpUserId(Guid mpUserId)
        {
            Loan loan = GetUnique(l => l.MpUserId == mpUserId && l.Status == 0, "CreateDate", false);
            return loan;
        }
    }
}
